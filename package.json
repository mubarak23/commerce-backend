{
  "name": "cinderbuild-backend",
  "version": "1.0.0",
  "description": "Cinderbuild Backend",
  "private": true,
  "dependencies": {
    "@sendgrid/mail": "7.4.1",
    "@sentry/node": "6.0.1",
    "@sentry/tracing": "6.0.1",
    "@supercharge/request-ip": "1.1.2",
    "accesscontrol": "2.2.1",
    "africastalking": "0.6.2",
    "agenda": "^5.0.0",
    "async-jsonwebtoken": "1.0.1",
    "awesome-phonenumber": "2.65.0",
    "axios": "0.19.2",
    "bcrypt": "^5.0.1",
    "body-parser": "1.15.2",
    "cloudinary": "1.25.0",
    "cors": "^2.8.5",
    "csv-parse": "5.0.4",
    "csv-parser": "3.0.0",
    "dotenv": "2.0.0",
    "ejs": "3.1.2",
    "express": "4.17.1",
    "express-session": "1.17.1",
    "firebase-admin": "9.4.2",
    "flutterwave-node-v3": "1.0.9",
    "generate-password": "1.5.1",
    "helmet": "3.1.0",
    "http-status-codes": "1.4.0",
    "joi": "17.4.0",
    "js-money": "0.6.3",
    "jsonwebtoken": "5.7.0",
    "moment": "2.27.0",
    "mongodb": "^6.3.0",
    "multer": "1.4.2",
    "node-cron": "3.0.2",
    "node-schedule": "^2.1.1",
    "normalize-email": "1.1.1",
    "pg": "8.2.2",
    "randomstring": "1.2.2",
    "reflect-metadata": "0.1.13",
    "source-map-support": "0.5.21",
    "string-template": "1.0.0",
    "swagger-ui-express": "4.1.4",
    "tslog": "3.1.1",
    "tsoa": "4.1.2",
    "twilio": "3.64.0",
    "typeorm": "0.2.26",
    "underscore": "1.10.2",
    "uuid": "8.3.2",
    "validator": "13.1.1"
  },
  "devDependencies": {
    "@types/bcrypt": "5.0.0",
    "@types/cors": "2.8.12",
    "@types/express": "4.17.6",
    "@types/helmet": "4.0.0",
    "@types/js-money": "0.6.1",
    "@types/jsonwebtoken": "8.5.9",
    "@types/mocha": "7.0.2",
    "@types/multer": "^1.4.5",
    "@types/node": "18.15.11",
    "@types/node-cron": "3.0.4",
    "@types/node-schedule": "^2.1.2",
    "@types/swagger-ui-express": "4.1.2",
    "@types/underscore": "1.11.4",
    "@types/uuid": "8.3.4",
    "@types/validator": "13.7.6",
    "@typescript-eslint/eslint-plugin": "5.54.1",
    "@typescript-eslint/parser": "5.54.1",
    "chai": "3.5.0",
    "chai-http": "2.0.1",
    "concurrently": "5.3.0",
    "eslint": "8.36.0",
    "eslint-config-airbnb-base": "13.1.0",
    "eslint-config-prettier": "4.2.0",
    "mocha": "2.4.5",
    "nodemon": "1.9.2",
    "rimraf": "3.0.2",
    "sinon": "9.0.2",
    "ts-node": "9.1.1",
    "typescript": "5.0.4"
  },
  "main": "dist/StartServer.js",
  "scripts": {
    "tsc": "tsc -p .",
    "rimraf": "rimraf ./dist",
    "prebuild": "tsoa spec-and-routes",
    "build": "npm run rimraf && npm run tsc && npm run copyextrafiles",
    "dockerbuild": "npm run rimraf && npm run tsc",
    "localdev": "ts-node -r dotenv/config src/StartServer.ts",
    "startdevdbs": "cd docker/dev-dbs && docker-compose down && docker-compose up -d && cd ../..",
    "destroydevdbs": "cd docker/dev-dbs && docker-compose down -v",
    "localdevwithoutdocker": "npm run build && ts-node -r dotenv/config src/StartServer.ts",
    "new-migration": "./node_modules/.bin/ts-node ./node_modules/.bin/typeorm migration:create -f src/ormconfig.ts -d src/migrations -n ",
    "run-migrations": "ts-node -r dotenv/config ./node_modules/.bin/typeorm migration:run -f src/ormconfig.ts",
    "start": "node dist/StartServer.js",
    "dockertest": "docker-compose -f docker-compose-test.yaml down -v && docker-compose -f docker-compose-test.yaml up --build --abort-on-container-exit --exit-code-from cinderbuild-tests",
    "localdockertest": "docker-compose -f docker-compose-localtest.yaml down -v && docker-compose -f docker-compose-localtest.yaml up --build --abort-on-container-exit --exit-code-from cinderbuild-tests",
    "test": "NODE_ENV=test mocha -r ts-node/register -r dotenv/config tests/**/*test.ts --timeout 40000",
    "copyextrafiles": "cp -r ./src/resources/ ./dist/resources && cp -r ./src/emailTemplates/ ./dist/emailTemplates",
    "lint": "eslint . --ext .ts",
    "lint-and-fix": "eslint . --ext .ts --fix",
    "backfill": "NODE_ENV=development ts-node backfills/userWalletsAndAccountsBackfill.ts",
    "build:digitalocean": "if test \"$NODE_ENV\" == \"production\" ; then ( npm install --production=true && npm run build && npm ci --production; ) else ( npm install --production=false && npm run build && npm ci; ) fi"
  },
  "engines": {
    "node": "14.19.x"
  },
  "author": "Ariaroo Efe"
}
